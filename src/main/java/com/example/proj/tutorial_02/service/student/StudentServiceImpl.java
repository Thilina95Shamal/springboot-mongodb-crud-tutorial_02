package com.example.proj.tutorial_02.service.student;

import com.example.proj.tutorial_02.model.student.Student;
import com.example.proj.tutorial_02.repository.student.StudentRepository;
import com.example.proj.tutorial_02.service.sequenceGeneratorService.SequenceGeneratorService;
import com.mongodb.MongoException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class StudentServiceImpl implements StudentService {

    private final StudentRepository studentRepository;

    private final SequenceGeneratorService sequenceGeneratorService;

    public StudentServiceImpl(StudentRepository studentRepository, SequenceGeneratorService sequenceGeneratorService) {
        this.studentRepository = studentRepository;
        this.sequenceGeneratorService = sequenceGeneratorService;
    }

    @Transactional
    @Override
    public void createStudent(Student student) {

        try{
            // Update from the Database the sequence value in the collection : database_sequence to the latest student id (5) if not it starts with the
            // 1st value and all students get updated(Data Error)
            student.setRno(sequenceGeneratorService.generateSequence(Student.SEQUENCE_NAME));
            studentRepository.save(student);
        }catch (MongoException e){
            throw new RuntimeException("Issue When Accessing Database");
        }
    }

    @Override
    public Student getStudentById(Integer id) {
        try{
            Optional<Student> byId = studentRepository.findById(id);
            if(byId.isPresent()){
                return byId.get();
            }else{
                throw new RuntimeException("No Student Found");
            }
        }catch (MongoException e){
            throw new RuntimeException("Issue When Accessing Database");
        }
    }

    @Override
    public List<Student> getStudents() {
        try{
            List<Student> all = studentRepository.findAll();
            if(all.isEmpty()){
                throw new RuntimeException("No Students Found");
            }else{
                return all;
            }
        }catch(MongoException e){
            throw new RuntimeException("Issue When Accessing Database");

        }
    }

    @Override
    public Student udpateStudent(Integer id, Student student) {
        try{
            Optional<Student> byId = studentRepository.findById(id);
            if(byId.isPresent()){
                // Error : Cannot autogenerate id of type java.lang.Integer for entity of type com.example.proj.model.student.Student! {if we don't pass rno value}
                //    "rno": 1, this should be provided in the request since that's something we added earlier (not autogenerated)
                //    as a request when creating the student, not a String object.
                return studentRepository.save(student);
            }else{
                throw new RuntimeException("No Student Found For This Id :" + id);
            }
        }catch(MongoException e){
            throw new RuntimeException("Issue When Accessing Database");
        }
    }

    @Override
    public void deleteStudent(Integer id) {
        try{
            Optional<Student> byId = studentRepository.findById(id);
            if(byId.isPresent()){
                studentRepository.delete(byId.get());
            }else{
                throw new RuntimeException("No Student Found For This Id :" + id);
            }
        }catch(MongoException e){
            throw new RuntimeException("Issue When Accessing Database");
        }
    }

    @Override
    public List<Student> createStudentList(List<Student> studentList) {
        studentList.forEach(student -> {
            student.setRno(sequenceGeneratorService.generateSequence(Student.SEQUENCE_NAME));
        });
        try{
            // Save All Students in one Method.
            return studentRepository.saveAll(studentList);
        }catch (MongoException e){
            throw new RuntimeException("Issue When Accessing Database");
        }
    }
}
